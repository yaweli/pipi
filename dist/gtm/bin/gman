#!/bin/bash
# manager
###############################
#
. /gtm/bin/mgr_dist
. /gtm/bin/gtmUtil
###############################
#
# 32b = 1m ,  32000b = 1g , 300M ~ 10000
#
# USAGE: 
#        Read "enter size" size 3000
########################################
function Read() {
	text="$1"       # display
	vvvv=$2         # var
	dddd="$3"       # default
	echo -n "$text ...: < $dddd > " ; read x
	if [ "x$x" = "x^" ]
	then exit
	fi
	if [ "x$x" = "x" ]
	then eval "export $vvvv=$dddd"
	     x="$dddd"
	else eval "export $vvvv=$x"
	fi
	echo " ...  $vvvv = $x"
}
function setdef() {
    export size=10000
    export exten=16000
    export rec_siz=64000
    export key_siz=1000
}
#
setdef
#
function sysman() {
	echo " 1 - start gtm"
	echo " 2 - stop gtm"
	echo " 3 - show proc"
	echo " 4 - back gtm"
	echo " 5 - install gtm from scratch"
	echo -n " option? ";read x
	case $x in
	1)
		gstart
		;;
	2)
		gstop
		;;
	3)
		proshow
		;;
	4)
		bgtm
		;;
	5)
		echo "to install m framework on new ubuntu"
		echo "1. take script from  /gtm/bin/ginst"
		echo "2. copy to dir /root/dev/"
		echo "3. chmod 755 /root/dev/ginst"
		echo "4. run on new linux ubuntu. /root/dev/ginst"
		echo " Folow all steps one by one"
		;;
	*)	echo error
		;;
	esac
	
	
}
function mntuci() {
	echo enter uci to mount,
	echo must be placed right in the directories
	echo " Mount uci: "
	guci
	if [ "x$uu" = "x" ] ;then return;fi
	/gtm/bin/m.sh<<endmnt
S ^%ZUCI("$UU","R")="/gtm/$uu/r/ /gtm/mgr/r/ /gtm/"
S ^%ZUCI("$UU","G")="/gtm/$UU.gld"
S ^%ZUCI("$UU")=""
endmnt
}

function shwuci() {
	echo "Enter uci:"
	guci
	if [ "x$uu" = "x" ] ;then return;fi
	export gtmroutines=/gtm
	export gtm_dist=/gtm
	export gtmgbldir=/gtm/$UU.gld
	/gtm/mumps -run ^GDE<<sofgde
SHOW
EXIT
sofgde
	return	
}
function newmgr() {
	if [ -d /gtm/mgr/g ] ; then echo Already exist ;exit ;fi
	echo "Building new MGR...start"

	size=100
	uu=MGR
	lower=mgr
	cd /gtm
	export gtmroutines=/gtm
	export gtm_dist=/gtm
	export gtmgbldir=/gtm/$uu.gld
	
	mkdir /gtm/$lower 2>/dev/null
	mkdir /gtm/$lower/g 2>/dev/null
	chmod 775 /gtm/$lower
	chgrp gtm /gtm/$lower
	chmod 775 /gtm/$lower/g
	chgrp gtm /gtm/$lower/g
	chmod 775 /gtm/$lower/r
	chgrp gtm /gtm/$lower/r
	/gtm/mumps -run ^GDE<<sofsofmgr
rename -region DEFAULT $uu
rename -segment DEFAULT $uu
change -segment $uu -file=/gtm/$lower/g/$lower.dat
change -segment $uu -BLOCK_SIZE=31232
change -segment $uu -GLOBAL_BUFFER_COUNT=4096
change -segment $uu -allocation=$size
change -segment $uu -extension=$exten
change -segment $uu -LOCK_SPACE=3800
change -region $uu -RECORD_SIZE=$rec_siz
change -region $uu -KEY_SIZE=$key_siz
add -region MGR -dyn=MGR
exit
sofsofmgr

	/gtm/mupip create -reg=$uu
	/gtm/mumps -direct<<sofsetmgr
S ^%ZUCI("$uu","R")="/gtm/$lower/r/ /gtm/"
S ^%ZUCI("$uu","G")="/gtm/$uu.gld"
S ^%ZUCI("$uu")=""
sofsetmgr

	echo "Building new MGR...ended"
	ls -l /gtm/MGR.gld
	ls -l /gtm/mgr/

}
function listuci() {
	ls -l /gtm/*.gld
	return
}
#
#
function guci() {
	export UU
	export uu
	echo -e "Uci: " ; read uu
	if [ "x$uu" = "x" ];then return;fi
	UU=`echo -n $uu|tr "[a-z]" "[A-Z]"`
	uu=`echo -n $UU|tr "[A-Z]" "[a-z]"`
	if [ ! -f /gtm/$UU.gld ]
	then echo No such uci $UU
		uu=""
		UU=""
		return
	fi
	return
}
function make_new_uci() {

	uu=$1
	lower=`echo $uu|tr '[A-Z]' '[a-z]'`
	cd /gtm
	export gtmroutines=/gtm
	export gtm_dist=/gtm
	export gtmgbldir=/gtm/$uu.gld

	mkdir /gtm/$lower 2>/dev/null
	mkdir /gtm/$lower/g 2>/dev/null
	mkdir /gtm/$lower/r 2>/dev/null
	chmod 775 /gtm/$lower
	chgrp gtm /gtm/$lower
	chmod 775 /gtm/$lower/g
	chgrp gtm /gtm/$lower/g
	chmod 775 /gtm/$lower/r
	chgrp gtm /gtm/$lower/r
	chmod 775 /gtm/$lower/mes # for .mes source code mumps framework (c) eli smadar
	chgrp gtm /gtm/$lower/mes

	/gtm/mumps -run GDE<<sofsof
rename -region DEFAULT $uu
rename -segment DEFAULT $uu
change -segment $uu -file=/gtm/$lower/g/$lower.dat
change -segment $uu -BLOCK_SIZE=31232
change -segment $uu -GLOBAL_BUFFER_COUNT=4096
change -segment $uu -allocation=$size
change -segment $uu -extension=$exten
change -segment $uu -LOCK_SPACE=3800
change -region $uu -RECORD_SIZE=$rec_siz
change -region $uu -KEY_SIZE=$key_siz
add -name %* -region=MGR
add -region MGR -dyn=MGR
add -segment MGR -file=/gtm/mgr/g/mgr.dat
change -segment MGR -BLOCK_SIZE=31232
change -segment MGR -GLOBAL_BUFFER_COUNT=4096
change -segment MGR -allocation=$size
change -segment MGR -extension=$exten
change -segment MGR -LOCK_SPACE=3800
change -region MGR -RECORD_SIZE=$rec_siz
change -region MGR -KEY_SIZE=$key_siz
exit
sofsof
	/gtm/mupip create -reg=$uu
	/gtm/mumps -direct<<sofset
S ^%ZUCI("$uu","R")="/gtm/$lower/r/ /gtm/mgr/r/ /gtm/"
S ^%ZUCI("$uu","G")="/gtm/$uu.gld"
S ^%ZUCI("$uu")=""
sofset
echo "/gtm/$lower/mes IN_CLOSE_WRITE /gtm/bin/reloadmes $uu \$# \$%">>/var/spool/incron/root
service incron reload
}
function deluci() {
	guci
	if [ "x$uu" = "x" ]
	then echo "nothing to do"
		return
	fi
	echo -n "are you sure you wat to kill uci $uu: (y) <n> "
	read x
	if [ "x$x" = "xy" ]
	then echo going to kill uci $uu
		echo "Run down $uu.."
		rundown $uu && 
			mkdir /gtm/.old 2>/dev/null &&
			mv /gtm/$UU.gld /gtm/.old/ &&
			mv /gtm/$uu /gtm/.old/ &&
			/gtm/mumps -direct<<sofdel
K ^%ZUCI("$UU")
sofdel
		sed '/^\/gtm\/$uu\//d' /var/spool/incron/root
		service incron reload
		echo "Uci $UU was deleted, source saved to /gtm/.old/"
	else echo Not killing
		return
	fi
}
function uci_adv() {
	echo " 32b = 1m ,  32000b = 1g"
	Read "uci start size" size $size
	Read "uci extension size" exten $exten
}
function newuci() {
	echo -n "enter new uci name:" ; read u
	if [ "x$u" = "x" ] ;then return ;fi
	if [[ $u != [A-Z] ]] ;then echo must be upper case;fi
	lower=`echo $u|tr '[A-Z]' '[a-z]'`
	if [ -d /gtm/$lower ] ;then echo exist;fi
	echo "Are you sure creating uci $u"
	echo "For advance click 'a'"
	echo -n "y/n/a <n> " ; read x
	if [ "x$x" = "x" ] ;then return;fi
	if [ "x$x" = "xa" ] ;then uci_adv;fi
	make_new_uci $u
	echo end of make new uci $u .....
}
function maplst() {
    uci=$1
    uciLower=$2

	echo "Global map list uci $uu:"
	echo "========================"
    export gtm_dist=/gtm
    export gtmgbldir=/gtm/$uci.gld
    echo "uci=$uci"
    { echo SHOW -N
      echo QUIT
    } | /gtm/bin/mrun $uci GDE
    echo "Enter.... ";read x
}
function newmap() {
    uci=$1
    uciLower=$2
    to=$3
    glo=$4
    export gtm_dist=/gtm
    export gtmgbldir=/gtm/$uci.gld
    export lto=`echo $to|tr '[A-Z]' '[a-z]'`
/gtm/bin/mrun $uci ^GDE <<Endnew
SETGD -FILE=$gtmgbldir
add -segment $to  -file=/gtm/$lto/g/$lto.dat
add -region $to -d=$to
add -name  $glo -region=$to
SETGD -FILE=/gtm/MGR.gld
exit
Endnew
}

function mapadd() {
	# 
	#  to
	# 
	Read "map To uci: " to e
	if [ "x$to" = "xe" ];then return;fi
	tol=`echo $to|tr '[A-Z]' '[a-z]'`
	if [ ! -f /gtm/$tol/g/$tol.dat ]
		then    echo "No target " /gtm/$tol/g/$tol.dat
		return
	fi
	while true
	do
		#
		# global
		#
		echo
		Read "Global ^" glo e
		if [ "x$glo" = "xe" ]
		then    echo "End of global maping"
				break
		fi
		echo from $UU global $glo to $to
		echo "-------------------------------------"
		Read "Are you sure to do the map? [y/n]  <n> " are n
		if [ "x$are" = "xy" ]
				then newmap $UU $uu $to $glo
				else echo "skip"
		fi
	done
}
function clnmap() {
    uci=$1
    uciLower=$2
    to=$3
    glo=$4
    export gtm_dist=/gtm
    export gtmgbldir=/gtm/uci.gld
    export lto=`echo $to|tr '[A-Z]' '[a-z]'`
mrun $uci ^GDE <<Endof2
del -name  $glo
EXIT
del -seg $to
del -reg $to
exit
Endof2
}
function mapdel() {
	Read "Global to cancel ^" glo e
	if [ "x$glo" = "xe" ] 
	then echo "wrong"
		 return
	fi
	Read "dest uci" to e
	if [ "x$glo" = "xe" ] ;then return;fi
	tol=`echo $to|tr '[A-Z]' '[a-z]'`
	if [ ! -f /gtm/$tol/g/$tol.dat ]
		 then    echo "No file /gtm/$tol/g/$tol.dat"
		 return
	fi
	echo
	Read "are you sure killing map global ^$glo? (y/n)" sure n
	if [ "x$sure" = "xy" ]
			then clnmap $UU $uu $to $glo
	fi
}
function glomap() {
	echo "Enter uci to manage Global mapping"
	guci
	while true
	do
		maplst $UU $uu
        echo M - Map a global to other uci
		echo D - Delete global mapping
		echo S - Show global mapping
		echo E - exit
		Read "global map option" xx E
		if [ "x$xx" = "xE" ];then return;fi
		if [ "x$xx" = "xM" ];then mapadd;fi
		if [ "x$xx" = "xD" ];then mapdel;fi
		if [ "x$xx" = "xS" ];then maplst $UU $uu;fi
	done
}
function uciman() {
	while true 
	do
		listuci
		echo N - CREATE NEW UCI
		echo D - DELETE UCI
		echo F - FIRST TIME CREATE MGR
		echo S - SHOW UCI INFO
		echo M - MOUNT UCI
		echo G - GLOBAL MAPPING
		echo -e options: ; read x
		if [ "x$x" = "xN" ] ;then newuci;fi
		if [ "x$x" = "xD" ] ;then deluci;fi
		if [ "x$x" = "xF" ] ;then newmgr;fi
		if [ "x$x" = "xS" ] ;then shwuci;fi
		if [ "x$x" = "xM" ] ;then mntuci;fi
		if [ "x$x" = "xG" ] ;then glomap;fi
		if [ "x$x" = "x" ] ;then break;fi
	done
}

if [ ! -f /gtm/GDE.o ]
then echo "!! missing file /gtm/GDE.o"
fi
echo "Mumps manager (c) eli smadar v1.07"
echo "----------------------------------"
echo "1 - Gtm system     [S]"
echo "2 - Uci management [U]"
echo -n "options : " ; read x
case $x in
1|S|s)
	sysman
	;;
2|U|u)
	uciman
	;;
*)
	;;
esac


echo end
#####################################
